import * as React from 'react';
import { eventFrom, setEventFrom, EventFromInput } from 'event-from';
import { PolymorphicPropsWithRef, PolymorphicMemoExoticComponent } from 'react-polymorphic-types';
export { eventFrom, setEventFrom, EventFromInput };
export declare type ActiveState = 'mouseActive' | 'touchActive' | 'keyActive' | false;
export declare type FocusState = 'focusFromMouse' | 'focusFromTouch' | 'focusFromKey' | false;
/**
 * State object used by React Interactive to determine how the `<Interactive>` component is rendered.
 * The InteractiveState object is also passed to the `onStateChange` callback and `children` (when `children` is a function).
 */
export interface InteractiveState {
    hover: boolean;
    active: ActiveState;
    focus: FocusState;
}
export declare type InteractiveStateKey = 'hover' | 'active' | 'focus';
/**
 * InteractiveStateChange is the type for the argument passed to the `onStateChange` callback.
 */
export interface InteractiveStateChange {
    state: InteractiveState;
    prevState: InteractiveState;
}
declare const defaultAs = "button";
export interface InteractiveOwnProps {
    children?: React.ReactNode | ((state: InteractiveState) => React.ReactNode);
    onStateChange?: ({ state, prevState }: InteractiveStateChange) => void;
    disabled?: boolean;
    useExtendedTouchActive?: boolean;
    hoverClassName?: string;
    activeClassName?: string;
    mouseActiveClassName?: string;
    touchActiveClassName?: string;
    keyActiveClassName?: string;
    focusClassName?: string;
    focusFromKeyClassName?: string;
    focusFromMouseClassName?: string;
    focusFromTouchClassName?: string;
    disabledClassName?: string;
    hoverStyle?: React.CSSProperties;
    activeStyle?: React.CSSProperties;
    mouseActiveStyle?: React.CSSProperties;
    touchActiveStyle?: React.CSSProperties;
    keyActiveStyle?: React.CSSProperties;
    focusStyle?: React.CSSProperties;
    focusFromKeyStyle?: React.CSSProperties;
    focusFromMouseStyle?: React.CSSProperties;
    focusFromTouchStyle?: React.CSSProperties;
    disabledStyle?: React.CSSProperties;
}
/**
 * Usage: `InteractiveProps<'button'>`, or `InteractiveProps<typeof Component>`
 *
 * Only use the `InteractiveProps` type when typing props that are directly passed to an `<Interactive>` component.
 * `InteractiveProps` includes the `as` prop and `ref` prop and should not be used for
 * typing components that wrap an `<Interactive>` component.
 *
 * For typing components that wrap an `<Interactive>` component use the type `InteractiveExtendableProps`
 *
 * For more see: https://github.com/rafgraph/react-interactive#using-with-typescript
 */
export declare type InteractiveProps<T extends React.ElementType = typeof defaultAs> = PolymorphicPropsWithRef<InteractiveOwnProps, T>;
/**
 * Usage: `InteractiveExtendableProps<'button'>`, or `InteractiveExtendableProps<typeof Component>`
 *
 * Use the `InteractiveExtendableProps` type when typing components that wrap an `<Interactive>` component
 * where the props are passed through to the `<Interactive>` component.
 *
 * For more see: https://github.com/rafgraph/react-interactive#using-with-typescript
 */
export declare type InteractiveExtendableProps<T extends React.ElementType = typeof defaultAs> = Omit<InteractiveProps<T>, 'as' | 'ref'>;
declare type InteractivePropsWithoutAs<T extends React.ElementType = typeof defaultAs> = Omit<InteractiveProps<T>, 'as'>;
interface PolymorphicInteractive extends PolymorphicMemoExoticComponent<InteractiveOwnProps, typeof defaultAs> {
    Button: React.ForwardRefExoticComponent<InteractivePropsWithoutAs<'button'>>;
    A: React.ForwardRefExoticComponent<InteractivePropsWithoutAs<'a'>>;
    Input: React.ForwardRefExoticComponent<InteractivePropsWithoutAs<'input'>>;
    Select: React.ForwardRefExoticComponent<InteractivePropsWithoutAs<'select'>>;
    Div: React.ForwardRefExoticComponent<InteractivePropsWithoutAs<'div'>>;
    Span: React.ForwardRefExoticComponent<InteractivePropsWithoutAs<'span'>>;
}
export declare const Interactive: PolymorphicInteractive;
export declare function createInteractive<T extends React.ElementType = typeof defaultAs>(as: T): React.ForwardRefExoticComponent<InteractivePropsWithoutAs<T>>;
