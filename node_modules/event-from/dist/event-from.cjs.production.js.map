{"version":3,"file":"event-from.cjs.production.js","sources":["../src/index.ts"],"sourcesContent":["export type EventFromInput = 'mouse' | 'touch' | 'key';\n\nlet recentEventFrom: EventFromInput = 'key';\nlet recentFocusFrom: EventFromInput = recentEventFrom;\nlet recentTouch = false;\nlet recentMouse = false;\nlet recentWindowFocus = false;\n\n// To determine if there was a recentTouch event\n// use setTimeout instead of a Date.now() comparison because\n// in the case of a long running/blocking process from a touch event,\n// the browser will push the corresponding mouse event (created by the touch interaction)\n// onto the callback queue at the time it should be executed,\n// and then push the timeout function onto the queue after the timer expires,\n// even if the the main thread is still blocked (because the browser is multi-threaded).\n// This results in the mouse event being moved to the callstack and called\n// before the timeout function so recentTouch is still true\n// regardless of how many Date.now() seconds have gone by.\n// Also, if subsequent touch events occur while the blocking process is running,\n// the browser will push the touch events onto the queue when the touch happens,\n// and if one of them is in queue before the previous touch event's timer expires,\n// it will be called before the timeout's function (so it can reset the timer),\n// and, this is the key part, if the previous timer has finished and it's callback is added to the queue,\n// the call to clearTimeout(recentTouchTimeoutId) will remove the timeout's function from the callback queue.\nlet recentTouchTimeoutId: number | undefined;\nconst setRecentEventFromTouch = (touchDelay: number) => {\n  recentTouch = true;\n  recentEventFrom = 'touch';\n\n  window.clearTimeout(recentTouchTimeoutId);\n  recentTouchTimeoutId = window.setTimeout(() => {\n    recentTouch = false;\n  }, touchDelay);\n};\n\nlet recentMouseTimeoutId: number | undefined;\nconst setRecentEventFromMouse = () => {\n  recentMouse = true;\n  recentEventFrom = 'mouse';\n\n  window.clearTimeout(recentMouseTimeoutId);\n  recentMouseTimeoutId = window.setTimeout(() => {\n    recentMouse = false;\n  }, 200);\n};\n\nconst handleTouchEvent = (touchDelay: number) => () =>\n  setRecentEventFromTouch(touchDelay);\n\nconst handlePointerEvent = (touchDelay: number) => (e: PointerEvent) => {\n  switch (e.pointerType) {\n    case 'mouse':\n      setRecentEventFromMouse();\n      break;\n    case 'pen':\n    case 'touch':\n      setRecentEventFromTouch(touchDelay);\n      break;\n  }\n};\n\nconst handleMouseEvent = () => {\n  if (!recentTouch) {\n    setRecentEventFromMouse();\n  }\n};\n\nconst handleKeyEvent = () => {\n  recentEventFrom = 'key';\n};\n\n// recentFocusFrom tracking\n// set document focus event capture listener which sets recentFocusFrom equal to recentEventFrom\n// except if there is a recent window focus event where the window is the target (unless there is also a recent mouse or touch event),\n// in which case leave recentFocusFrom unchanged to maintain correct recentFocusFrom after switching apps/windows/tabs/etc,\n// if/when the focus event is passed into eventFrom later in the cycle, just return recentFocusFrom.\n// for tracking recent window focus, set window focus capture event listener,\n// if the target is window (or document on firefox), then track recentWindowFocus with setTimeout 300\nlet recentWindowFocusTimeoutId: number | undefined;\nconst handleWindowFocusEvent = (e: FocusEvent) => {\n  if (e.target === window || e.target === document) {\n    recentWindowFocus = true;\n\n    window.clearTimeout(recentWindowFocusTimeoutId);\n    recentWindowFocusTimeoutId = window.setTimeout(() => {\n      recentWindowFocus = false;\n    }, 300);\n  }\n};\n\nconst handleDocumentFocusEvent = () => {\n  if (!recentWindowFocus || recentMouse || recentTouch) {\n    recentFocusFrom = recentEventFrom;\n  }\n};\n\nconst listenerOptions = { capture: true, passive: true };\n\nconst documentListeners = [\n  ['touchstart', handleTouchEvent(750)],\n  ['touchend', handleTouchEvent(300)],\n  ['touchcancel', handleTouchEvent(300)],\n  ['pointerenter', handlePointerEvent(300)],\n  ['pointerover', handlePointerEvent(300)],\n  ['pointerout', handlePointerEvent(300)],\n  ['pointerleave', handlePointerEvent(300)],\n  ['pointerdown', handlePointerEvent(750)],\n  ['pointerup', handlePointerEvent(300)],\n  ['pointercancel', handlePointerEvent(300)],\n  ['mouseenter', handleMouseEvent],\n  ['mouseover', handleMouseEvent],\n  ['mouseout', handleMouseEvent],\n  ['mouseleave', handleMouseEvent],\n  ['mousedown', handleMouseEvent],\n  ['mouseup', handleMouseEvent],\n  ['keydown', handleKeyEvent],\n  ['keyup', handleKeyEvent],\n  ['focus', handleDocumentFocusEvent],\n];\n\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\n  documentListeners.forEach(([eventName, eventHandler]) => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore not sure how to get TS to match the handler type to the specific eventName\n    document.addEventListener(eventName, eventHandler, listenerOptions);\n  });\n\n  window.addEventListener('focus', handleWindowFocusEvent, listenerOptions);\n}\n\n// temporarily set the return value for eventFrom(e)\n// note that the eventFrom(e) value will change when new events come in\n// useful when manually generating events, e.g. el.focus() or el.click()\n// and you want eventFrom(e) to treat that event as occurring from a specific input\nexport const setEventFrom = (value: EventFromInput): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value !== 'mouse' && value !== 'touch' && value !== 'key') {\n      throw Error(\n        `setEventFrom function requires argument of \"mouse\" | \"touch\" | \"key\", argument received: ${value}`,\n      );\n    }\n  }\n  if (value === 'mouse' || value === 'touch' || value === 'key') {\n    recentEventFrom = value;\n    recentFocusFrom = value;\n  }\n};\n\n// use any instead of unknown b/c unknown causes type error when passing a react synthetic event\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const eventFrom = (event: Record<string, any>): EventFromInput => {\n  // use the incoming event to help determine recentEventFrom\n  // in the same manner as the document event listeners\n  // this helps catch edge cases especially when a move event is passed to eventFrom\n  // because move event listeners are not set by Event From\n  switch (event.pointerType) {\n    case 'mouse':\n      setRecentEventFromMouse();\n      break;\n    case 'pen':\n    case 'touch':\n      if (!recentTouch) {\n        setRecentEventFromTouch(300);\n      } else {\n        recentEventFrom = 'touch';\n      }\n      break;\n  }\n\n  if (/mouse/.test(event.type) && !recentTouch) {\n    setRecentEventFromMouse();\n  }\n\n  if (/touch/.test(event.type)) {\n    if (!recentTouch) {\n      setRecentEventFromTouch(300);\n    } else {\n      recentEventFrom = 'touch';\n    }\n  }\n\n  // focus events return recentFocusFrom, see recentFocusFrom tracking note above\n  if (/focus/.test(event.type)) {\n    return recentFocusFrom;\n  }\n\n  return recentEventFrom;\n};\n\n// note that edge cases exist for scroll and wheel events where eventFrom will return the wrong input,\n// to fix this, event-from would need to set a 'wheel' event listener on the document (see below),\n// but decided not to add it because 'wheel' is a high frequency event (like move events)\n// and don't currently have a use case for eventFrom(scrollEvent)\n// to add support:\n//   document.addEventListener(\n//     'wheel',\n//     () => {\n//       // might need to track wheel event separately and use it just for eventFrom(scroll)\n//       // because the wheel event is elastic, it continues to fire after the user interaction has finished\n//       recentEventFrom = 'mouse';\n//     },\n//     listenerOptions,\n//   );\n"],"names":["recentTouchTimeoutId","recentEventFrom","recentFocusFrom","recentTouch","recentMouse","recentWindowFocus","setRecentEventFromTouch","touchDelay","window","clearTimeout","setTimeout","recentMouseTimeoutId","setRecentEventFromMouse","handleTouchEvent","handlePointerEvent","e","pointerType","handleMouseEvent","handleKeyEvent","recentWindowFocusTimeoutId","handleWindowFocusEvent","target","document","listenerOptions","capture","passive","documentListeners","forEach","eventName","eventHandler","addEventListener","event","test","type","value"],"mappings":"oEAEA,IAsBIA,EAtBAC,EAAkC,MAClCC,EAAkCD,EAClCE,GAAc,EACdC,GAAc,EACdC,GAAoB,EAmBxB,MAAMC,EAA2BC,IAC/BJ,GAAc,EACdF,EAAkB,QAElBO,OAAOC,aAAaT,GACpBA,EAAuBQ,OAAOE,YAAW,KACvCP,GAAc,IACbI,IAGL,IAAII,EACJ,MAAMC,EAA0B,KAC9BR,GAAc,EACdH,EAAkB,QAElBO,OAAOC,aAAaE,GACpBA,EAAuBH,OAAOE,YAAW,KACvCN,GAAc,IACb,MAGCS,EAAoBN,GAAuB,IAC/CD,EAAwBC,GAEpBO,EAAsBP,GAAwBQ,IAClD,OAAQA,EAAEC,aACR,IAAK,QACHJ,IACA,MACF,IAAK,MACL,IAAK,QACHN,EAAwBC,KAKxBU,EAAmB,KAClBd,GACHS,KAIEM,EAAiB,KACrBjB,EAAkB,OAUpB,IAAIkB,EACJ,MAAMC,EAA0BL,IAC1BA,EAAEM,SAAWb,QAAUO,EAAEM,SAAWC,WACtCjB,GAAoB,EAEpBG,OAAOC,aAAaU,GACpBA,EAA6BX,OAAOE,YAAW,KAC7CL,GAAoB,IACnB,OAUDkB,EAAkB,CAAEC,SAAS,EAAMC,SAAS,GAE5CC,EAAoB,CACxB,CAAC,aAAcb,EAAiB,MAChC,CAAC,WAAYA,EAAiB,MAC9B,CAAC,cAAeA,EAAiB,MACjC,CAAC,eAAgBC,EAAmB,MACpC,CAAC,cAAeA,EAAmB,MACnC,CAAC,aAAcA,EAAmB,MAClC,CAAC,eAAgBA,EAAmB,MACpC,CAAC,cAAeA,EAAmB,MACnC,CAAC,YAAaA,EAAmB,MACjC,CAAC,gBAAiBA,EAAmB,MACrC,CAAC,aAAcG,GACf,CAAC,YAAaA,GACd,CAAC,WAAYA,GACb,CAAC,aAAcA,GACf,CAAC,YAAaA,GACd,CAAC,UAAWA,GACZ,CAAC,UAAWC,GACZ,CAAC,QAASA,GACV,CAAC,QA3B8B,OAC1Bb,GAAqBD,GAAeD,KACvCD,EAAkBD,MA4BA,oBAAXO,QAA8C,oBAAbc,WAC1CI,EAAkBC,SAAQ,EAAEC,EAAWC,MAGrCP,SAASQ,iBAAiBF,EAAWC,EAAcN,MAGrDf,OAAOsB,iBAAiB,QAASV,EAAwBG,sBAuBjCQ,IAKxB,OAAQA,EAAMf,aACZ,IAAK,QACHJ,IACA,MACF,IAAK,MACL,IAAK,QACET,EAGHF,EAAkB,QAFlBK,EAAwB,KAoB9B,MAbI,QAAQ0B,KAAKD,EAAME,QAAU9B,GAC/BS,IAGE,QAAQoB,KAAKD,EAAME,QAChB9B,EAGHF,EAAkB,QAFlBK,EAAwB,MAOxB,QAAQ0B,KAAKD,EAAME,MACd/B,EAGFD,wBApDoBiC,IAQb,UAAVA,GAA+B,UAAVA,GAA+B,QAAVA,IAC5CjC,EAAkBiC,EAClBhC,EAAkBgC"}